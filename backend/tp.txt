from flask import Flask, request, jsonify
from flask_cors import CORS
import torch
import torch.nn as nn
from transformers import DistilBertTokenizer, DistilBertModel
import time

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Allow cross-origin requests from frontend

# Detect device (GPU or CPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"🔥 Using device: {device}")  # Print device at startup

# Define model class
class MultiLabelBERT(nn.Module):
    def __init__(self, num_labels):
        super(MultiLabelBERT, self).__init__()
        self.bert = DistilBertModel.from_pretrained('distilbert-base-uncased')
        self.dropout = nn.Dropout(0.3)
        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)
    
    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.last_hidden_state[:, 0, :]
        x = self.dropout(pooled_output)
        return self.classifier(x)

# Load trained model
num_labels = 143  # Ensure this matches your training labels
model = MultiLabelBERT(num_labels).to(device)  # Move model to GPU if available
model.load_state_dict(torch.load("bert.pt", map_location=device))
model.eval()  # Set model to evaluation mode

# Print confirmation that model is on the correct device
print(f"✅ Model is running on: {next(model.parameters()).device}")

# Load tokenizer
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')

unique_courses = ['Advanced Certificate Course in Sound Recording and Reproduction ', 'B.A. Geography ', 'B.A. History', 'B.A. Programme in Film, Television, and New Media Production ', 'B.A. in Physical Education', 'B.Com. (Accounting & Finance) ', 'B.Com. (Banking & Insurance) ', 'B.Com. (Financial Markets) ', 'B.Sc. (Bio-Technology) ', 'B.Sc. (Hospitality Studies)', 'B.Sc. (Physiology)', 'B.Sc. Aviation ', 'B.Sc. Computer Science ', 'B.Sc. Hospitality Studies ', 'B.Sc. Information Technology (I.T.) ', 'B.Sc. Maritime Hospitality Studies ', 'B.Sc. in Agriculture ', 'B.Sc. in Bioinformatics ', 'B.Sc. in Computer Applications ', 'B.Sc. in Environmental Science ', 'B.Sc. in Forensic Science ', 'B.Sc. in Maritime Hospitality Studies ', 'B.Sc. in Microbiology ', 'B.Sc. in Nautical Sciences ', 'B.Sc. in Sports Management ', 'Bachelor In Heritage Management (B.H.M.) ', 'Bachelor of Architecture (B.Arch.) ', 'Bachelor of Arts (B.A.) ', 'Bachelor of Arts (B.A.) in English Literature ', 'Bachelor of Arts (B.A.) in Psychology ', 'Bachelor of Arts (B.A.) in Sociology ', 'Bachelor of Chemical Engineering (B.Chem. Engg.)', 'Bachelor of Chemical Technology (B.Chem. Tech.) ', 'Bachelor of Commerce (B.Com.)', 'Bachelor of Design (B.Des.) in Animation', 'Bachelor of Design (B.Des.) in Graphic Design ', 'Bachelor of Engineering (Bio-Medical Engineering) ', 'Bachelor of Engineering (Chemical Engineering) ', 'Bachelor of Engineering (Civil Engineering)', 'Bachelor of Engineering (Computer Engineering) ', 'Bachelor of Engineering (Construction Engineering) ', 'Bachelor of Engineering (Electrical Engineering) ', 'Bachelor of Engineering (Electronics & Telecommunication Engineering) ', 'Bachelor of Engineering (Electronics Engineering) ', 'Bachelor of Engineering (Information Technology) ', 'Bachelor of Engineering (Instrumentation Engineering) ', 'Bachelor of Engineering (Marine Engineering) ', 'Bachelor of Engineering (Mechanical Engineering) ', 'Bachelor of Engineering (Software Engineering) ', 'Bachelor of Fine Art (B.F.A.) (Applied Art) ', 'Bachelor of Fine Art (B.F.A.) (Ceramics) ', 'Bachelor of Fine Art (B.F.A.) (Interior Decoration) ', 'Bachelor of Fine Art (B.F.A.) (Metal Work) ', 'Bachelor of Fine Art (B.F.A.) (Painting) ', 'Bachelor of Fine Art (B.F.A.) (Sculpture) ', 'Bachelor of Fine Art (B.F.A.) (Textile Design) ', 'Bachelor of Fine Arts (B.F.A.) in Dance', 'Bachelor of Fine Arts (B.F.A.) in Graphic Design ', 'Bachelor of Fine Arts (B.F.A.) in Performing Arts ', 'Bachelor of Library & Information Science (B.L.I.Sc.) ', 'Bachelor of Management Studies (B.M.S.)', 'Bachelor of Music (B.Mus.) ', 'Bachelor of Music (B.Mus.) in Hindustani Classical Music ', 'Bachelor of Music (B.Mus.) in Western Classical Music ', 'Bachelor of Performing Arts (B.P.A.) - Dance ', 'Bachelor of Performing Arts (B.P.A.) - Music (Karnataka Vocal/Instrumental) ', 'Bachelor of Pharmaceutical Sciences (B.Pharm. Sci.) ', 'Bachelor of Physical Education (B.P.Ed.) ', 'Bachelor of Science (B.Sc.) in Chemistry ', 'Bachelor of Science (B.Sc.) in Mathematics ', 'Bachelor of Science (B.Sc.) in Physics ', 'Bachelor of Science in Nautical Sciences ', 'Bachelor of Social Work (B.S.W.)', 'Bachelor of Social Work (B.S.W.) ', 'Bachelor of Sports Journalism ', 'Bachelors of Mass Media (B.M.M.) ', 'Certificate Course in Applied Biotechnology ', 'Certificate Course in Dance (Bharatanatyam) ', 'Certificate Course in Dance Therapy ', 'Certificate Course in Dramatics (In Marathi) ', 'Certificate Course in Environmental Biochemistry ', 'Certificate Course in Event Management ', 'Certificate Course in Fitness Training ', 'Certificate Course in Industrial Biochemistry ', 'Certificate Course in Light Music ', 'Certificate Course in Music Appreciation and Music Journalism ', 'Certificate Course in Nutrition and Dietetics ', 'Certificate Course in Photography ', 'Certificate Course in Quality Control (OC), GMP, and GLP', 'Certificate Course in Quality Control (OC), GMP, and GLP ', 'Certificate Course in Research Methodology ', 'Certificate Course in Sound Recording and Reproduction ', 'Certificate Course in Sports Nutrition ', 'Certificate Courses in Performing Folk Arts', 'Certificate Courses in Performing Folk Arts ', 'Certificate in Art Therapy ', 'Certificate in Art and Design ', 'Certificate in Bartending ', 'Certificate in Choreography ', 'Certificate in Costume Design', 'Certificate in Culinary Arts ', 'Certificate in Dance (Kathak) - Part-time ', 'Certificate in Digital Marketing ', 'Certificate in Fashion Designing ', 'Certificate in Graphic Designing', 'Certificate in Music Composition and Direction ', 'Certificate in Performing Arts Management ', 'Certificate in Photography', 'Certificate in Sports Coaching ', 'Certificate in Studio Singing Technique ', 'Certificate in Theatre Arts ', 'Certificate in Web Designing ', 'Certificate in Yoga and Fitness ', 'Diploma Course in Dance (Kathak) - Part-time ', 'Diploma Course in Management of Education ', 'Diploma in 3D Animation ', 'Diploma in Athletic Training ', 'Diploma in Aviation Safety and Hospitality', 'Diploma in Dance (Contemporary/Western) ', 'Diploma in Digital Marketing ', 'Diploma in Early Childhood Care and Education (Dip E.C.C.Ed.) ', 'Diploma in Event Management ', 'Diploma in Fashion Merchandising ', 'Diploma in Food Processing and Preservation ', 'Diploma in Graphic Designing', 'Diploma in Leather Technology ', 'Diploma in Music ', 'Diploma in Music Composition and Direction ', 'Diploma in Nutrition and Dietetics ', 'Diploma in Personal Training ', 'Diploma in Physical Education ', 'Diploma in Sound Recording and Reproduction ', 'Diploma in Sports Coaching ', 'Diploma in Textile Designing ', 'Diploma in Yoga and Dance Therapy ', 'Diploma in Yogic Education', 'Five Year Integrated Programme (B.A. and M.A.) in German ', 'Five Years Integrated Programme (B.A. and M.A.) in Russian ', 'Foundation Course in Dance ', 'Master of Music (M.Mus.) ', 'Master of Performing Arts (M.P.A.) - Dance', 'Master of Performing Arts (M.P.A.) - Dance ', 'Post Graduate Bridge Course in Dance ']
# Function to determine conditions based on values
def get_conditions(boardPercentage, aptitudeScore):
    condition1 = "less than 75" if boardPercentage < 75 else "more than 75"
    condition2 = "less than 80" if aptitudeScore < 80 else "more than 80"
    return condition1, condition2

# Function to get course recommendations
def predict_courses(hobbies, boardPercentage, aptitudeScore):
    condition1, condition2 = get_conditions(boardPercentage, aptitudeScore)

    input_text = " ".join(hobbies) + f" {condition1} {condition2}"
    print(f"📝 Input Text for Model: {input_text}")  # Debugging Input

    # Measure inference time
    with torch.no_grad():
        inputs = tokenizer(input_text, return_tensors="pt", padding=True, truncation=True, max_length=256).to(device)
        
        start_time = time.time()  # Start timing
        outputs = model(**inputs)
        end_time = time.time()  # End timing
        
        probabilities = torch.sigmoid(outputs).squeeze()
        top_indices = torch.argsort(probabilities, descending=True)[:5]  # Top 5 predictions
        
        recommended_courses = [unique_courses[i] for i in top_indices if i < len(unique_courses)]
        
        # Print execution time and device stats
        print(f"🚀 Inference Time: {end_time - start_time:.4f} seconds on {device}")
        print(f"🔍 CUDA Memory Allocated: {torch.cuda.memory_allocated(device) / 1024**2:.2f} MB")
        print(f"🔍 CUDA Memory Reserved: {torch.cuda.memory_reserved(device) / 1024**2:.2f} MB")
        
        return recommended_courses

# API Route to fetch recommendations
@app.route('/recommend', methods=['POST'])
def recommend():
    data = request.json
    print(f"📩 Received Data: {data}")

    hobbies = data.get("hobbies", [])
    boardPercentage = data.get("boardPercentage", 0)
    aptitudeScore = data.get("aptitudeScore", 0)

    if not hobbies or boardPercentage is None or aptitudeScore is None:
        return jsonify({"error": "Invalid data"}), 400

    recommendations = predict_courses(hobbies, boardPercentage, aptitudeScore)
    print(f"🎯 Recommendations: {recommendations}")

    return jsonify({"recommendations": recommendations})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001, debug=True)  # Running on port 5001
